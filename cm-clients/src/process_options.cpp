#include "reconstruction.hpp"
#include <exception>
#include <cstdlib>

options_type process_options(int argc, char** argv)
{
  namespace po = boost::program_options;
  options_type options;

  po::options_description desc("Allowed options");
  desc.add_options()
    ("help", "produce help message")
    ("traction_type", 
      po::value<TractionType>(&options.traction_type)->required(),
      "Whether to reconstruct forces or pressures. Allowed values: \"pressures\", \"forces\".")
    ("nn_tractions",
      po::value<bool>(&options.nonnegative_tractions)->default_value(false, "false"),
      "Whether the reconstructed tractions should be forced to be nonnegative.")
    ("input_type",
      po::value<InputType>(&options.input_type)->required(),
      "Source of sensor readings. Allowed values: \"yaml\" (yaml file), \"luca\" (a directory with "
      "datasets generated by Luca Muscari).")
    ("input",
      po::value<std::string>(&options.input)->required(),
      "Input for the reconstruction. If input_type == yaml, this is the path to the YAML file "
      "that describes the grid. If input_type == luca, this is the path to the files generated "
      "by Luca Muscari")
    ("source_pitch",
      po::value<double>(&options.source_pitch)->default_value(0.001),
      "Pitch of the grid the sensors readings should be interpolated into. If <= 0, no interpolation "
      "will be performed. Pitch is the distance between two neighbouring "
      "cells in either x or y direction, in meters. Default: 0.001 [m].")
    ("NIPP",
      po::value<cm::NIPP>(&options.interpolator_policy)->default_value(cm::NIPP::InterpolateToZero, "InterpolateToZero"),
      "Interpolator's policy for non-interpolable points (i.e. points in the target grid "
      "which are outside of the source grid. Allowed values: \"InterpolateToZero\", "
      "\"RemoveFromGrid\". Default: InterpolateToZero")
    ("tractions_pitch",
      po::value<double>(&options.tractions_pitch)->default_value(0.001),
      "Pitch of the tractions grid, i.e. distance between two neighbouring cells in either x or y "
      "direction, in meters. Default: 0.001 [m].")
    ("displacements_pitch",
      po::value<double>(&options.reconstructed_pitch)->default_value(0.001),
      "Pitch of the (resulting) displacements grid, i.e. distance between two neighbourint cells in "
      "either x or y direction, in meters. Default: 0.001 [m].")
  ;

  po::variables_map vm;
  try {
    po::store(po::parse_command_line(argc, argv, desc), vm);
    po::notify(vm);
  } catch ( const boost::program_options::error& e ) {
    std::cerr << e.what() << std::endl;
    std::cerr << desc     << std::endl;
    std::exit(1);
  }

  if (vm.count("help")) {
    std::cout << desc << std::endl;
    std::exit(0);
  }

  return options;
}

